"use strict";(self.webpackChunk_encryptr_docs=self.webpackChunk_encryptr_docs||[]).push([[828],{5186:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7896),a=n(1461),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},l="ROT",c={unversionedId:"tutorial-basics/ROT",id:"tutorial-basics/ROT",title:"ROT",description:"A simple letter susbstitution cypher that rotates the alphabet for X quantity of letters.",source:"@site/docs/tutorial-basics/ROT.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/ROT",permalink:"/Encryptr/docs/docs/tutorial-basics/ROT",draft:!1,editUrl:"https://github.com/VitorGouveia/Encryptr/blob/main/packages/docs/docs/tutorial-basics/ROT.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Decrypter Class",permalink:"/Encryptr/docs/docs/tutorial-basics/decrypter"},next:{title:"Zenit",permalink:"/Encryptr/docs/docs/tutorial-basics/ZenitPolar"}},u={},p=[{value:"About",id:"about",level:2},{value:"Usage",id:"usage",level:2},{value:"Construction",id:"construction",level:2}],d={toc:p};function h(t){var e=t.components,n=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rot"},"ROT"),(0,o.kt)("p",null,"A simple letter susbstitution cypher that rotates the alphabet for X quantity of letters."),(0,o.kt)("h2",{id:"about"},"About"),(0,o.kt)("p",null,"Widely known due to your famous variant ROT-13, is a letter substitution cypher that rotates the alphabet by 13 letters. More about it ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ROT13"},"in here")),(0,o.kt)("p",null,"In Encryptr we implemented it as a class that follows the ",(0,o.kt)("inlineCode",{parentName:"p"},"ICryptography")," contract, which defines base methods for a cryptographic implementation."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The usage is simple, import the ",(0,o.kt)("inlineCode",{parentName:"p"},"ROT")," class from the ",(0,o.kt)("inlineCode",{parentName:"p"},"core")," package and instantiate it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { ROT } from "@encryptr/core"\n\nconst rot = new ROT()\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ROT")," class has just one prop, which is optional and is by defauult 13, the amount of characters you want to skip, making it not only a ",(0,o.kt)("inlineCode",{parentName:"p"},"ROT-13")," method but a ",(0,o.kt)("inlineCode",{parentName:"p"},"ROT-\u221e")," method, and you can do it like so."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { ROT } from "@encryptr/core"\n\nconst rot = new ROT({\n  skip: 20\n})\n')),(0,o.kt)("h2",{id:"construction"},"Construction"),(0,o.kt)("p",null,"This is a step by step document that shows how I thought about it when building"),(0,o.kt)("p",null,"First, I needed to transform the user input into an array so I could traverse it and link it with it's 13 more position character, so I did just that, using a neat ES6 javascript trick to convert strings into arrays"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"function ROT(input: string) {\n  const inputArray = [...input]\n}\n")),(0,o.kt)("p",null,"It would convert a simple string like ",(0,o.kt)("inlineCode",{parentName:"p"},'"vitor"')," to ",(0,o.kt)("inlineCode",{parentName:"p"},'["v", "i", "t", "o", "r"]'),", and that's exatly what I needed, then I would traverse through each and every letter and finds it's counterpart in ROT13 system."),(0,o.kt)("p",null,"To find the character counterpart I would need to know first where the character was located in the alphabet array first, so I did just that using the ",(0,o.kt)("inlineCode",{parentName:"p"},".indexOf()")," method."),(0,o.kt)("p",null,"After finding it's index in the alphabet array, it was just a question of adding 13 to the index and that's it, job done."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{2}","{2}":!0},"function ROT(input: string) {\n  const inputArray = [...input]\n\n  const transformInput = inputArray.map((character) => {\n    const currentIndex = alphabet.indexOf(character)\n\n    return alphabet[currentIndex + 13]\n  })\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"But there's a problem.")),(0,o.kt)("p",null,"Any character that would be ",(0,o.kt)("em",{parentName:"p"},"less than")," 13 characters from the end of the alphabet would return ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),", and that's not good. So I made a special case for those letter and treated them accordingly."),(0,o.kt)("p",null,"The way I treated those letters was, I first needed to know how many characters it would take to finish the alphabet array, then I could subtract that from the whole skip, which is 13, that would be how many character I would need to travel from the beggining of the array, I don't if that makes that much sense but it makes to me."),(0,o.kt)("p",null,"That basically wraps the idea of the ROT-13 implementation and the internal workings and little problems."))}h.isMDXComponent=!0},3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(m,i(i({ref:e},u),{},{components:n})):r.createElement(m,i({ref:e},u))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);